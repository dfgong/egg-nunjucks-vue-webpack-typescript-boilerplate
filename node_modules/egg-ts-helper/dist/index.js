"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const debug_1 = tslib_1.__importDefault(require("debug"));
const events_1 = require("events");
const fs_1 = tslib_1.__importDefault(require("fs"));
const path_1 = tslib_1.__importDefault(require("path"));
const watcher_1 = tslib_1.__importDefault(require("./watcher"));
const utils = tslib_1.__importStar(require("./utils"));
const debug = debug_1.default('egg-ts-helper#index');
const dtsComment = '// This file is created by egg-ts-helper\n' +
    '// Do not modify this file!!!!!!!!!\n';
exports.defaultConfig = {
    cwd: utils.convertString(process.env.ETS_CWD, process.cwd()),
    framework: utils.convertString(process.env.ETS_FRAMEWORK, 'egg'),
    typings: utils.convertString(process.env.ETS_TYPINGS, './typings'),
    caseStyle: utils.convertString(process.env.ETS_CASE_STYLE, 'lower'),
    autoRemoveJs: utils.convertString(process.env.ETS_AUTO_REMOVE_JS, true),
    throttle: utils.convertString(process.env.ETS_THROTTLE, 500),
    watch: utils.convertString(process.env.ETS_WATCH, false),
    watchOptions: undefined,
    execAtInit: utils.convertString(process.env.ETS_EXEC_AT_INIT, false),
    silent: utils.convertString(process.env.ETS_SILENT, process.env.NODE_ENV === 'test'),
    watchDirs: {},
    configFile: utils.convertString(process.env.ETS_CONFIG_FILE, './tshelper'),
};
// default watch dir
function getDefaultWatchDirs(opt) {
    const baseConfig = {};
    // extend
    baseConfig.extend = {
        path: 'app/extend',
        generator: 'extend',
    };
    // controller
    baseConfig.controller = {
        path: 'app/controller',
        interface: 'IController',
        generator: 'class',
    };
    // middleware
    baseConfig.middleware = {
        path: 'app/middleware',
        interface: 'IMiddleware',
        generator: 'object',
    };
    // proxy
    baseConfig.proxy = {
        path: 'app/proxy',
        interface: 'IProxy',
        generator: 'class',
        enabled: false,
    };
    // model
    baseConfig.model = {
        path: 'app/model',
        generator: 'function',
        interface: 'IModel',
        caseStyle: 'upper',
    };
    if (opt && utils.moduleExist('egg-sequelize', opt.cwd)) {
        baseConfig.model.interface = 'Sequelize';
        baseConfig.model.framework = 'sequelize';
    }
    // config
    baseConfig.config = {
        path: 'config',
        generator: 'config',
        trigger: ['add', 'unlink', 'change'],
    };
    // plugin
    baseConfig.plugin = {
        path: 'config',
        generator: 'plugin',
        trigger: ['add', 'unlink', 'change'],
    };
    // service
    baseConfig.service = {
        path: 'app/service',
        interface: 'IService',
        generator: 'class',
    };
    // egg
    baseConfig.egg = {
        path: 'app',
        generator: 'egg',
        watch: false,
    };
    return baseConfig;
}
exports.getDefaultWatchDirs = getDefaultWatchDirs;
class TsHelper extends events_1.EventEmitter {
    constructor(options) {
        super();
        this.cacheDist = {};
        this.dtsFileList = [];
        // utils
        this.utils = utils;
        // configure ets
        this.configure(options);
        // init watcher
        this.initWatcher();
        // generate d.ts at init
        if (this.config.execAtInit) {
            debug('exec at init');
            this.build();
        }
    }
    // build all dirs
    build() {
        this.watcherList.forEach(watcher => watcher.execute());
        return this;
    }
    // destroy
    destroy() {
        this.removeAllListeners();
        this.watcherList.forEach(item => item.destroy());
        this.watcherList.length = 0;
    }
    // log
    log(info) {
        if (this.config.silent) {
            return;
        }
        utils.log(info);
    }
    // create oneForAll file
    createOneForAll(dist) {
        const config = this.config;
        const oneForAllDist = (typeof dist === 'string') ? dist : path_1.default.join(config.typings, './ets.d.ts');
        const oneForAllDistDir = path_1.default.dirname(oneForAllDist);
        // create d.ts includes all types.
        const distContent = dtsComment + this.dtsFileList
            .map(file => {
            const importUrl = path_1.default
                .relative(oneForAllDistDir, file.replace(/\.d\.ts$/, ''))
                .replace(/\/|\\/g, '/');
            return `import '${importUrl.startsWith('.') ? importUrl : `./${importUrl}`}';`;
        })
            .join('\n');
        this.emit('update', oneForAllDist);
        utils.writeFileSync(oneForAllDist, distContent);
    }
    // init watcher
    initWatcher() {
        const config = this.config;
        // format watching dirs
        this.watcherList = [];
        Object.keys(config.watchDirs).forEach(key => {
            const conf = config.watchDirs[key];
            if (conf.hasOwnProperty('enabled') && !conf.enabled) {
                return;
            }
            const watcher = new watcher_1.default(Object.assign({}, conf, { name: key }), this);
            this.watcherList.push(watcher);
            watcher.on('update', this.generateTs.bind(this));
            if (config.watch) {
                watcher.watch();
            }
        });
    }
    // configure
    // options > configFile > package.json
    configure(options) {
        // base config
        const config = Object.assign({}, exports.defaultConfig, { watchDirs: getDefaultWatchDirs(options) });
        const cwd = options.cwd || config.cwd;
        const configFile = options.configFile || config.configFile;
        const pkgInfo = utils.getPkgInfo(cwd);
        config.framework = options.framework || exports.defaultConfig.framework;
        // read from package.json
        if (pkgInfo.egg) {
            mergeConfig(config, pkgInfo.egg.tsHelper);
        }
        // read from local file
        mergeConfig(config, utils.requireFile(utils.getAbsoluteUrlByCwd(configFile, cwd)));
        debug('%o', config);
        // merge local config and options to config
        mergeConfig(config, options);
        debug('%o', options);
        // resolve config.typings to absolute url
        config.typings = utils.getAbsoluteUrlByCwd(config.typings, cwd);
        this.config = config;
    }
    generateTs(result, file) {
        const config = this.config;
        const resultList = Array.isArray(result) ? result : [result];
        resultList.forEach(item => {
            // check cache
            if (this.isCached(item.dist, item.content)) {
                return;
            }
            let isRemove = false;
            if (item.content) {
                // create file
                const dtsContent = [
                    dtsComment,
                    `import '${config.framework}';`,
                    item.content,
                ].join('\n');
                debug('created d.ts : %s', item.dist);
                utils.writeFileSync(item.dist, dtsContent);
                this.emit('update', item.dist, file);
                this.log(`create ${item.dist}`);
            }
            else {
                if (!fs_1.default.existsSync(item.dist)) {
                    return;
                }
                // remove file
                isRemove = true;
                debug('remove d.ts : %s', item.dist);
                fs_1.default.unlinkSync(item.dist);
                this.emit('remove', item.dist, file);
                this.log(`delete ${item.dist}`);
            }
            // update distFiles
            this.updateDistFiles(item.dist, isRemove);
        });
    }
    updateDistFiles(fileUrl, isRemove) {
        const index = this.dtsFileList.indexOf(fileUrl);
        if (index >= 0) {
            if (isRemove) {
                this.dtsFileList.splice(index, 1);
            }
        }
        else {
            this.dtsFileList.push(fileUrl);
        }
    }
    isCached(fileUrl, content) {
        const cacheItem = this.cacheDist[fileUrl];
        if (cacheItem === content) {
            // no need to create file content is not changed.
            return true;
        }
        this.cacheDist[fileUrl] = content;
        return false;
    }
}
exports.default = TsHelper;
function createTsHelperInstance(options) {
    return new TsHelper(options);
}
exports.createTsHelperInstance = createTsHelperInstance;
// merge ts helper options
function mergeConfig(base, ...args) {
    args.forEach(opt => {
        if (!opt) {
            return;
        }
        Object.keys(opt).forEach(key => {
            if (key !== 'watchDirs') {
                base[key] = opt[key] === undefined ? base[key] : opt[key];
                return;
            }
            const watchDirs = opt.watchDirs || {};
            Object.keys(watchDirs).forEach(k => {
                const item = watchDirs[k];
                if (typeof item === 'boolean') {
                    if (base.watchDirs[k]) {
                        base.watchDirs[k].enabled = item;
                    }
                }
                else if (item) {
                    if (base.watchDirs[k]) {
                        Object.assign(base.watchDirs[k], item);
                    }
                    else {
                        base.watchDirs[k] = item;
                    }
                }
            });
        });
    });
}
//# sourceMappingURL=data:application/json;base64,